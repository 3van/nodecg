function NodeCG(bundlename) {
    'use strict';

    this.host = '<%= host %>';
    this.port = '<%= port %>';

    // We can't guarantee Socket.io is ready in time on the view, so empty object for now
    this._socket = {};

    this._handlers = [];

    var self = this;

    // Called internally once we know Socket.io is ready
    this._setupAPI = function() {
        self._socket = io.connect('http://'+ self.host +':'+ self.port +'/');

        self._socket.on('message', function (data) {
            for (var i = 0; i < self._handlers.length; i++) {
                var _handler = self._handlers[i];
                if (data.messageName === _handler.messageName &&
                    data.bundleName === _handler.bundleName) {
                    _handler.func(data.content);
                }
            }
        });

        self.sendMessage = function (messageName, data, callback) {
            if (typeof callback === "undefined" && typeof data === "function") {
                callback = data;
                data = null;
            }

            self._socket.emit('message', {
                bundleName: bundlename,
                messageName: messageName,
                content: data
            }, callback);
        };

        self.listenFor = function (messageName, bundleName, handler) {
            if (typeof handler === "undefined") {
                handler = bundleName;
                bundleName = bundlename;
            }

            self._handlers.push({
                messageName: messageName,
                bundleName: bundleName,
                func: handler
            });
        };


        self.createVar = function (name, setter) {
            if (typeof setter === 'undefined') {
                setter = function(){};
            }

            self.listenFor(name, function(newValue) {
                self.variables[name] = newValue;
            });

            var value = null;
            Object.defineProperty(self.variables, name, {
                get: function() {
                    return value;
                },
                set: function(newValue) {
                    value = newValue;
                    setter(newValue);
                    self.sendMessage(name, newValue);
                },
                enumerable: true
            });
        };

        // not implemented, need to make a way to delete listenFor handlers
        /*self.deleteVar = function (name) {
            delete this.variables[name];
        };*/

        self.variables = {};
    };

    // On the dashboard, Socket.io is defined so setup now
    // viewsetup.ejs will call when ready
    if (typeof io !== "undefined") {
        this._setupAPI();
    }

    // For use by views, never called on dashboard
    this.onready = function() {};
}
