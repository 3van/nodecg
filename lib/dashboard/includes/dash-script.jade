script(type='text/javascript').
    function sendMessage(socket, commandstring, meta) {
        socket.emit('send', {message: commandstring, content: meta });
    }
    
    window.onload = function () {
        var $container = $('body > div.container');
        
        // initialize
        $container.imagesLoaded(function () {
            applyMasonry($container);
        });
        
        // re-apply the masonry onClick, useful for checkboxes that toggle controls
        $container.click(function () {
            applyMasonry($container);
        });
        
        // TODO: have masonry re-apply when a textarea is resized
        function applyMasonry(selector) {
            selector.masonry({
                columnWidth: 128 + 8, //.panel-span-1 width = 128, +8 for 4px pad on each side
                itemSelector: '.panel'
            })
        }
    
        // Add informational "popover" tooltips to the header of each panel
        $('.panel-heading').append(
            '<button type="button" class="btn btn-xs btn-info panel-info"><i class="fa fa-info"></i></button>'
        );
        $('.panel-info').each(function (index) {
            pkgName = $(this).closest('.panel').attr("id");
            $(this).popover({
                title: pkgName,
                html: true,
                placement: "bottom",
                parent: $(this).closest('.panel-heading'),
                content: "<a target=\"_blank\" href=\"" + window.location.origin + "/view/" + pkgName + "\">" +
                    window.location.origin + "/view/" + pkgName + "</a>"
            });
        });
        
        function NodeCG(packageName) {
            this.host = '#{ config.host }';
            this.port = #{ config.port };
            this._socket = io.connect('http://' + this.host + ':' + this.port + '/');
            this._handlers = [];
            var self = this;
            this._socket.on('connect', function() {
                self._socket.on('message', function(data) {
                    if (data.packageName !== packageName)
                        return;
                    for (var i = 0; i < self._handlers.length; i++) {
                        var _handler = self._handlers[i];
                        if (data.messageName === _handler.messageName) {
                            _handler.func(data.content);
                        }
                    }
                });
            });
            this.sendMessage = function(messageName, data) {
                self._socket.json.send({
                packageName: packageName,
                messageName: messageName,
                content: data
                });
            };
            this.listenFor = function(messageName, handler) {
                self._handlers.push({
                messageName: messageName,
                func: handler
                });
            };
        }
    }