#!/usr/bin/env node
'use strict';

var argv = require('minimist')(process.argv.slice(2));
var fs = require('fs.extra');
var inquirer = require("inquirer");
var Liftoff = require('liftoff');
var npm = require('npm');
var os = require('os');
var path = require('path');
require('string.prototype.endswith');

var NodeCG = new Liftoff({
    name: 'nodecg',
    configName: 'cfg/nodecg',
    extensions: {
        '.json': null
    }
}).on('require', function (name, module) {
        console.log('Loading external module:', name);
    }).on('requireFail', function (name, err) {
        console.log('Unable to load:', name, err);
    });

NodeCG.launch({
    cwd: argv.cwd,
    configPath: argv.hackerfile,
    require: argv.require,
    completion: argv.completion,
    verbose: argv.verbose
}, invoke);

function invoke (env) {
    if (argv.verbose) {
        console.log('LIFTOFF SETTINGS:', this);
        console.log('CLI OPTIONS:', argv);
        console.log('CWD:', env.cwd);
        console.log('LOCAL MODULES PRELOADED:', env.require);
        console.log('SEARCHING FOR:', env.configNameRegex);
        console.log('FOUND CONFIG AT:',  env.configPath);
        console.log('CONFIG BASE DIR:', env.configBase);
        console.log('YOUR LOCAL MODULE IS LOCATED:', env.modulePath);
        console.log('LOCAL PACKAGE.JSON:', env.modulePackage);
        console.log('CLI PACKAGE.JSON', require('../package'));
    }

    if (env.configBase) {
        // config was found
        process.chdir(env.configBase);
        process.chdir('..'); // nodecg.json is located in 'cfg' folder, we must go up one
    } else {
        // no config, assume the current dir is the intended destination
    }

    // switch on the first freestanding argument (i.e., 'install', 'init'. Not '--verbose', or '--cwd ./blah/'
    switch (argv._[0]) {
        case 'init':
            var version = argv._[1] || 'latest';

            // check if nodecg is already installed
            var pjsonPath = process.cwd() + '/package.json';
            if (fs.existsSync(pjsonPath)) {
                var pjson = require(pjsonPath);
                if (pjson.name.toLowerCase() === 'nodecg') {
                    console.log('NodeCG is already installed in this directory');
                    process.exit(0);
                }
            }

            // Use npm to install to node_modules, then copy out
            fs.mkdirpSync('node_modules');

            npm.load({}, function (er) {
                if (er) {
                    console.error('Error loading npm:', er.stack);
                    process.exit(1);
                }

                // astoundingly stupid hack to make NPM not spam the console
                console.log('Installing nodecg@' + version);
                npm.commands.install(['nodecg@' + version], function (er, data) {
                    if (er) {
                        console.error('Error downloading/installing NodeCG:', er.stack);
                        process.exit(1);
                    } else {
                        // npm automatically installs nodecg to node_modules/nodecg
                        // we must move it into the current directory
                        console.log(os.EOL + 'Copying files. This will take a while...');
                        fs.copyRecursive('./node_modules/nodecg', '.', function (er) {
                            if (er) {
                                console.error('Error moving nodecg after npm install:', er.stack);
                                process.exit(1);
                            }

                            fs.rmrf('./node_modules/nodecg', function (err) {
                                if (err) {
                                    console.error('Error cleaning up after npm install:', er.stack);
                                    process.exit(1);
                                }

                                console.log('NodeCG (%s) installed to', version, process.cwd());
                                process.exit(0);
                            });
                        });
                    }
                });
            });
            break;
        case 'configure':
        case 'config':
        case 'cfg':
            break;
        case 'bundle':
            var questions = [
                {
                    name: 'name',
                    message: 'Bundle name:',
                    validate: function(answer) {
                        return answer ? true : false;
                    }
                },
                {
                    name: 'description',
                    message: 'Description:'
                },
                {
                    name: 'authors',
                    message: 'Author:',
                    filter: function(answer) {
                        return new Array(answer);
                    }
                },
                {
                    name: 'homepage',
                    message: 'Homepage:'
                },
                {
                    name: 'license',
                    message: 'License:'
                }
            ];
            inquirer.prompt(questions, function(answers) {
                var dir = path.resolve(process.cwd(), 'bundles', answers.name);
                fs.mkdirpSync(dir);
                fs.writeFileSync(path.join(dir, 'nodecg.json'), JSON.stringify(answers, null, 4));
            });
            break;
        default:
            if (fs.existsSync(path.join('.', 'package.json'))) {
                var pjson = require(process.cwd() + '/package.json');
                console.log('Running local NodeCG ('+ pjson.version +')');
                require(process.cwd());
            } else {
                console.error('Nothing to run in this directory');
            }
            break;
    }
}
